{"version":3,"file":"client-connection-worker.js","names":["socket","serverInfo","reconnectTimeout","queue","self","onmessage","event","_event$data","data","type","server","connectToServer","readyState","WebSocket","OPEN","send","push","close","clearTimeout","url","_unused","postMessage","onopen","_i2","_queue2","length","_socket","msg","e","onclose","onerror","err","_socket2","message"],"sources":["../src/client-connection-worker.ts"],"sourcesContent":["declare const SockJS: any;\nimport type { ServerInfo } from \"./client-main\";\n\nlet socket: WebSocket | null = null;\nlet serverInfo: ServerInfo;\nlet reconnectTimeout: ReturnType<typeof setTimeout> | null = null;\nlet queue: string[] = [];\n\nself.onmessage = (event: MessageEvent) => {\n\tconst { type, server, data } = event.data;\n\tif (type === 'connect') {\n\t\tserverInfo = server;\n\t\tconnectToServer();\n\t} else if (type === 'send') {\n\t\tif (socket && socket.readyState === WebSocket.OPEN) {\n\t\t\tsocket.send(data);\n\t\t} else {\n\t\t\tqueue.push(data);\n\t\t}\n\t} else if (type === 'disconnect') {\n\t\tif (socket) socket.close();\n\t\tif (reconnectTimeout) clearTimeout(reconnectTimeout);\n\t\tsocket = null;\n\t}\n};\n\nfunction connectToServer() {\n\t// Always use your backend WebSocket endpoint\n\tconst url = 'wss://server.pokemondnd.xyz/showdown/';\n\n\ttry {\n\t\tsocket = new WebSocket(url);\n\t} catch {\n\t\tsocket = null;\n\t\tpostMessage({ type: 'error', data: 'Failed to connect to WebSocket at ' + url });\n\t\treturn;\n\t}\n\tif (socket) {\n\t\tsocket.onopen = () => {\n\t\t\tpostMessage({ type: 'connected' });\n\t\t\tfor (const msg of queue) socket?.send(msg);\n\t\t\tqueue = [];\n\t\t};\n\n\t\tsocket.onmessage = (e: MessageEvent) => {\n\t\t\tpostMessage({ type: 'message', data: e.data });\n\t\t};\n\n\t\tsocket.onclose = () => {\n\t\t\tpostMessage({ type: 'disconnected' });\n\t\t\t// scheduleReconnect();\n\t\t};\n\n\t\tsocket.onerror = (err: Event) => {\n\t\t\tpostMessage({ type: 'error', data: (err as any).message || '' });\n\t\t\tsocket?.close();\n\t\t};\n\t\treturn;\n\t}\n\treturn postMessage({ type: 'error' });\n}\n"],"mappings":";;;AAGA,GAAI,CAAAA,MAAwB,CAAG,IAAI;AACnC,GAAI,CAAAC,UAAsB;AAC1B,GAAI,CAAAC,gBAAsD,CAAG,IAAI;AACjE,GAAI,CAAAC,KAAe,CAAG,EAAE;;AAExBC,IAAI,CAACC,SAAS,CAAG,SAACC,KAAmB,CAAK;AACzC,IAAAC,WAAA,CAA+BD,KAAK,CAACE,IAAI,CAAjCC,IAAI,CAAAF,WAAA,CAAJE,IAAI,CAAEC,MAAM,CAAAH,WAAA,CAANG,MAAM,CAAEF,IAAI,CAAAD,WAAA,CAAJC,IAAI;AAC1B,GAAIC,IAAI,GAAK,SAAS,CAAE;AACvBR,UAAU,CAAGS,MAAM;AACnBC,eAAe,CAAC,CAAC;AAClB,CAAC,IAAM,IAAIF,IAAI,GAAK,MAAM,CAAE;AAC3B,GAAIT,MAAM,EAAIA,MAAM,CAACY,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE;AACnDd,MAAM,CAACe,IAAI,CAACP,IAAI,CAAC;AAClB,CAAC,IAAM;AACNL,KAAK,CAACa,IAAI,CAACR,IAAI,CAAC;AACjB;AACD,CAAC,IAAM,IAAIC,IAAI,GAAK,YAAY,CAAE;AACjC,GAAIT,MAAM,CAAEA,MAAM,CAACiB,KAAK,CAAC,CAAC;AAC1B,GAAIf,gBAAgB,CAAEgB,YAAY,CAAChB,gBAAgB,CAAC;AACpDF,MAAM,CAAG,IAAI;AACd;AACD,CAAC;;AAED,QAAS,CAAAW,eAAeA,CAAA,CAAG;;AAE1B,GAAM,CAAAQ,GAAG,CAAG,uCAAuC;;AAEnD,GAAI;AACHnB,MAAM,CAAG,GAAI,CAAAa,SAAS,CAACM,GAAG,CAAC;AAC5B,CAAE,MAAAC,OAAA,CAAM;AACPpB,MAAM,CAAG,IAAI;AACbqB,WAAW,CAAC,CAAEZ,IAAI,CAAE,OAAO,CAAED,IAAI,CAAE,oCAAoC,CAAGW,GAAI,CAAC,CAAC;AAChF;AACD;AACA,GAAInB,MAAM,CAAE;AACXA,MAAM,CAACsB,MAAM,CAAG,UAAM;AACrBD,WAAW,CAAC,CAAEZ,IAAI,CAAE,WAAY,CAAC,CAAC,CAAC,QAAAc,GAAA,GAAAC,OAAA;AACjBrB,KAAK,CAAAoB,GAAA,CAAAC,OAAA,CAAAC,MAAA,CAAAF,GAAA,QAAAG,OAAA,CAAlB,GAAM,CAAAC,GAAG,CAAAH,OAAA,CAAAD,GAAA,EAAW,CAAAG,OAAA,CAAA1B,MAAM,SAAN0B,OAAA,CAAQX,IAAI,CAACY,GAAG,CAAC,CAAC;AAC3CxB,KAAK,CAAG,EAAE;AACX,CAAC;;AAEDH,MAAM,CAACK,SAAS,CAAG,SAACuB,CAAe,CAAK;AACvCP,WAAW,CAAC,CAAEZ,IAAI,CAAE,SAAS,CAAED,IAAI,CAAEoB,CAAC,CAACpB,IAAK,CAAC,CAAC;AAC/C,CAAC;;AAEDR,MAAM,CAAC6B,OAAO,CAAG,UAAM;AACtBR,WAAW,CAAC,CAAEZ,IAAI,CAAE,cAAe,CAAC,CAAC;;AAEtC,CAAC;;AAEDT,MAAM,CAAC8B,OAAO,CAAG,SAACC,GAAU,CAAK,KAAAC,QAAA;AAChCX,WAAW,CAAC,CAAEZ,IAAI,CAAE,OAAO,CAAED,IAAI,CAAGuB,GAAG,CAASE,OAAO,EAAI,EAAG,CAAC,CAAC;AAChE,CAAAD,QAAA,CAAAhC,MAAM,SAANgC,QAAA,CAAQf,KAAK,CAAC,CAAC;AAChB,CAAC;AACD;AACD;AACA,MAAO,CAAAI,WAAW,CAAC,CAAEZ,IAAI,CAAE,OAAQ,CAAC,CAAC;AACtC","ignoreList":[]}